pub struct VianaicGlyph {
    pub source: &'static str,
    pub name: &'static str,
    pub left: bool,
    pub right: bool,
    pub swappable: bool,
}

pub fn create_all() -> Vec<VianaicGlyph> {
    GLYPHS
        .iter()
        .map(|(source, name)| {
            let left = name.chars().nth(0).unwrap() == '_';
            let right = name.chars().last().unwrap() == '_';
            let mut swappable = false;
            if (left && !right) || (!left && right) {
                let swapped: String = name.chars().rev().collect();
                swappable = GLYPHS.iter().find(|(_, name)| name == &swapped).is_some();
            }
            VianaicGlyph {
                source,
                name,
                swappable,
                left,
                right,
            }
        })
        .collect()
}

const GLYPHS: [(&'static str, &'static str); 63] = [
    ("a", "a"),
    ("b", "_b_"),
    ("c", "_c_"),
    ("d", "_d_"),
    ("e", "_e"),
    ("f", "_f"),
    ("g", "_g"),
    ("h", "_h"),
    ("i", "_i_"),
    ("j", "j"),
    ("k", "_k"),
    ("l", "_l"),
    ("m", "_m_"),
    ("n", "_n"),
    ("o", "o"),
    ("p", "_p"),
    ("q", "_q"),
    ("r", "_r"),
    ("s", "_s"),
    ("t", "_t"),
    ("u", "_u_"),
    ("v", "_v_"),
    ("w", "_w"),
    ("x", "_x_"),
    ("y", "_y_"),
    ("z", "_z_"),
    ("E", "e_"),
    ("F", "f_"),
    ("G", "g_"),
    ("H", "h_"),
    ("K", "k_"),
    ("L", "l_"),
    ("P", "p_"),
    ("R", "r_"),
    ("S", "s_"),
    ("T", "t_"),
    ("W", "w_"),
    ("Y", "_y"),
    ("exclamdown", "ch_"),
    ("cent", "_ch"),
    ("sterling", "th_"),
    ("Euro", "_th"),
    ("currency", "sh_"),
    ("yen", "_sh"),
    ("brokenbar", "gh_"),
    ("section", "_gh"),
    ("dieresis", "_ng"),
    ("copyright", "ph_"),
    ("ordfeminine", "_ph"),
    ("guillemotleft", "double"),
    ("logicalnot", "wh_"),
    ("registered", "the"),
    ("macron", "and"),
    ("zero", "zero"),
    ("one", "one"),
    ("two", "two"),
    ("three", "three"),
    ("four", "four"),
    ("five", "five"),
    ("six", "six"),
    ("seven", "seven"),
    ("eight", "eight"),
    ("nine", "nine"),
];

pub const CODES: [(char, &'static str); 62] = [
    ('a', "a"),
    ('b', "_b_"),
    ('c', "_c_"),
    ('d', "_d_"),
    ('e', "e_"),
    ('f', "f_"),
    ('g', "g_"),
    ('h', "h_"),
    ('i', "_i_"),
    ('j', "j"),
    ('k', "k_"),
    ('l', "l_"),
    ('m', "_m_"),
    ('n', "_n"),
    ('o', "o"),
    ('p', "p_"),
    ('q', "_q"),
    ('r', "r_"),
    ('s', "s_"),
    ('t', "t_"),
    ('u', "_u_"),
    ('v', "_v_"),
    ('w', "w_"),
    ('x', "_x_"),
    ('y', "_y_"),
    ('z', "_z_"),
    ('A', "a"),
    ('B', "_b_"),
    ('C', "_c_"),
    ('D', "_d_"),
    ('E', "e_"),
    ('F', "f_"),
    ('G', "g_"),
    ('H', "h_"),
    ('I', "_i_"),
    ('J', "j"),
    ('K', "k_"),
    ('L', "l_"),
    ('M', "_m_"),
    ('N', "_n"),
    ('O', "o"),
    ('P', "p_"),
    ('Q', "_q"),
    ('R', "r_"),
    ('S', "s_"),
    ('T', "t_"),
    ('U', "_u_"),
    ('V', "_v_"),
    ('W', "w_"),
    ('X', "_x_"),
    ('Y', "_y_"),
    ('Z', "_z_"),
    ('0', "zero"),
    ('1', "one"),
    ('2', "two"),
    ('3', "three"),
    ('4', "four"),
    ('5', "five"),
    ('6', "six"),
    ('7', "seven"),
    ('8', "eight"),
    ('9', "nine"),
];

